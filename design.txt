db

user
id, first name, last name, email, user role (PAL | MEMBER), balance

visit request
id, requestor id, fulfilled, transaction, tasks

visit
id, member id, pal id, date, minutes, tasks

transaction line
id, user id, type, amount, date

initial thoughts and decisions:
we would be better off splitting monthly allocations off from the user table (this isn't normalized since pals theoretically don't have allocations, but we'd have a single two entry table and may not be worth depending on scale), especially because transactions should grow at a much faster rate than users
for ease of implementation for "v0" we can just use an aggregation off of visits
initially leaving the modeled foreign keys as ints rather than letting JPA do the joins for me
going to let tasks begin as just a string and allow members to add whatever they want there
we don't really need member id on the visit, but it'll make calculating remaining allocation easier
I'm going to ignore passwords for now :)

rather than viewing things as "monthly allocations" I will instead roll forward with the field as a "balance" that is reloaded via transaction
decoupled the db values as well so transaction line items may originate from places other than a visit/etc


Members request Visits through a Visit Request
Visits are between a Pal and a Member
Visits result in transaction line items which handle account settlement